using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MauiApp1.Model;
using MauiApp1.P2P;

namespace MauiApp1;

public partial class P2pView : ContentView
{
    private P2PService _p2pService;

    private bool IsP2PEnabled { get; set; } = true;

    private bool IsActive { get; set; }
    // private const int P2PIntervalMinutes = 2; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞–±–æ—Ç—ã P2P –≤ –º–∏–Ω—É—Ç–∞—Ö
    // private const int P2PWorkDurationMinutes = 1; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã P2P –≤ –º–∏–Ω—É—Ç–∞—Ö

    // private System.Timers.Timer _p2pControlTimer;
    // private System.Timers.Timer autoAddTimer;
    // private bool isAutoAddEnabled = false;

    public event Action<SpaceObject>? SpaceObjectReceived;

    public P2pView()
    {
        InitializeComponent();

        _p2pService = new P2PService();
        // _p2pService.PeerDiscovered += OnPeerDiscovered;
        _p2pService.ThreatReceived += OnThreatReceived;
        _p2pService.LogMessage += OnP2PLogMessage;

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º P2P
        Start();
    }

    public void Start()
    {
        if (IsActive) return;

        try
        {
            _p2pService.StartService();
            Update(true);
            Console.WriteLine("P2P —Å–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ P2P: {ex.Message}");
            Update(false);
        }
    }

    private void Update(bool isActive)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            if (isActive)
            {
                p2pStatusIcon.Text = "üü¢";
                p2pStatusIcon.TextColor = Colors.Green;
            }
            else
            {
                p2pStatusIcon.Text = "üî¥";
                p2pStatusIcon.TextColor = Colors.Red;
            }
        });
    }

    private void OnPeerDiscovered(PeerInfo peer)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            Console.WriteLine($"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∏—Ä: {peer.DeviceName}");
            // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–∏—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        });
    }

    private void OnThreatReceived(SpaceObject threat)
    {
        MainThread.BeginInvokeOnMainThread(() => SpaceObjectReceived?.Invoke(threat));
    }

    private void OnP2PLogMessage(string message)
    {
        MainThread.BeginInvokeOnMainThread(() =>
        {
            Console.WriteLine($"P2P: {message}");
            // –ú–æ–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        });
    }

    private void IconTapped(object sender, TappedEventArgs e)
    {
        if (IsP2PEnabled)
        {
            _p2pService.StopService();
            IsP2PEnabled = false;
            Update(false);
        }
        else
        {
            _p2pService.StartService();
            IsP2PEnabled = true;
            Update(true);
        }
    }

    public void AddRandomObject()
    {
        var newObject = ObjectGenerator.GenerateRandomObject();
        OnThreatReceived(newObject);

        if (newObject.IsThreat)
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≥—Ä–æ–∑—É —á–µ—Ä–µ–∑ P2P
            _ = _p2pService.ShareThreat(newObject);
        }
    }

    // protected override void OnDisappearing()
    // {
    // base.OnDisappearing();
    // StopAutoAdd();
    // _p2pService.StopService();
    // }

    // private void StartTimer()
    // {
    //     _p2pControlTimer = new System.Timers.Timer(TimeSpan.FromMinutes(P2PIntervalMinutes).TotalMilliseconds);
    //     _p2pControlTimer.Elapsed += async (s, e) => await ControlP2PService();
    //     _p2pControlTimer.AutoReset = true;
    //     _p2pControlTimer.Start();
    // 
    //     // –ó–∞–ø—É—Å–∫–∞–µ–º P2P —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    //     _ = Task.Run(async () => await ControlP2PService());
    // }

    // private async Task ControlP2PService()
    // {
    //     try
    //     {
    //         // –í–∫–ª—é—á–∞–µ–º P2P
    //         await StartP2P();
    // 
    //         // –ñ–¥–µ–º duration –º–∏–Ω—É—Ç
    //         await Task.Delay(TimeSpan.FromMinutes(P2PWorkDurationMinutes));
    // 
    //         // –í—ã–∫–ª—é—á–∞–µ–º P2P
    //         StopP2P();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è P2P: {ex.Message}");
    //     }
    // }

    private void StopP2P()
    {
        if (!IsActive) return;

        try
        {
            _p2pService.StopService();
            IsActive = false;

            Update(false);

            Console.WriteLine("P2P —Å–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ P2P: {ex.Message}");
        }
    }

    // private async void OnShareThreatsClicked(object sender, EventArgs e)
    // {
    //     var threats = Objects.Where(o => o.IsThreat).ToList();
    //     if (!threats.Any())
    //     {
    //         await DisplayAlert("–ù–µ—Ç —É–≥—Ä–æ–∑", "–ù–µ—Ç —É–≥—Ä–æ–∑ –¥–ª—è –æ–±–º–µ–Ω–∞", "OK");
    //         return;
    //     }
    // 
    //     foreach (var threat in threats)
    //     {
    //         await _p2pService.ShareThreat(threat);
    //     }
    // 
    //     await DisplayAlert("–û–±–º–µ–Ω", $"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {threats.Count} —É–≥—Ä–æ–∑", "OK");
    // }

    // private void OnAddObjectClicked(object sender, EventArgs e)
    // {
    // AddRandomObject();
    // }

    // private void OnAutoAddClicked(object sender, EventArgs e)
    // {
    //     if (isAutoAddEnabled)
    //     {
    //         StopAutoAdd();
    //         autoAddButton.Text = "üîÅ –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ";
    //         autoAddButton.BackgroundColor = Color.FromArgb("#2980B9");
    //     }
    //     else
    //     {
    //         StartAutoAdd();
    //         autoAddButton.Text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å";
    //         autoAddButton.BackgroundColor = Color.FromArgb("#E74C3C");
    //     }
// }

// private void StartAutoAdd()
// {
//     autoAddTimer = new System.Timers.Timer(5000);
//     autoAddTimer.Elapsed += (s, e) =>
//         MainThread.BeginInvokeOnMainThread(AddRandomObject);
//     autoAddTimer.AutoReset = true;
//     autoAddTimer.Start();
//     isAutoAddEnabled = true;
// }
// 
// private void StopAutoAdd()
// {
//     autoAddTimer?.Stop();
//     autoAddTimer?.Dispose();
//     isAutoAddEnabled = false;
// }
}